// Generated by Sophon Schema. Do not edit manually!
import { SophonInstance, SenderCore, SophonCore } from "@sophon-js/server";

////////////////////////////////////////
// Types
////////////////////////////////////////

export interface Channel {
  id: string;
  spaceId: string;
  parentId: string | null;
  name: string;
  order: number;
  lastUpdated: string | null;
  type: string;
}
export interface Space {
  id: string;
  name: string;
  icon: string | null;
  channels: Channel[];
  roles: Role[];
  ownerId: string | null;
}
export interface Role {
  id: string;
  name: string;
  color: string | null;
  permissions: string;
  position: number;
}
export interface Member {
  id: string;
  spaceId: string;
  user: User;
  roleIds: string[];
}
export interface User {
  id: string;
  name: string;
  avatar: string | null;
  category: string | null;
}
export interface Message {
  id: string;
  content: string;
  timestamp: string;
  authorId: string | null;
  author: User | null;
  channelId: string;
}
export interface Invite {
  code: string;
}
export interface SpaceUpdateOptions {
  name: string | null;
  icon: string | null;
}
export interface MemberUpdateOptions {
  roleIds: string[];
}
export interface UserUpdateOptions {
  name: string | null;
  avatar: string | null;
}
export interface ChannelCreateOptions {
  name: string;
  type: string;
  parentId: string | null;
}
export interface TypingEvent {
  channelId: string;
  userId: string;
  member: Member | null;
}
export interface ListMessageOptions {
  cursor: string | null;
  limit: number;
}
export interface MessageDeleteEvent {
  messageId: string;
  channelId: string;
}
export interface VoiceToken {
  url: string;
  channelId: string;
  token: string;
}

////////////////////////////////////////
// Services
////////////////////////////////////////

export interface SophonContext {}
export class MainServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
}

export abstract class AbstractMainService {
  $: (room: string) => MainServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new MainServiceSender(sophonCore.senderCore, room);
  }
  abstract spaces: AbstractSpaceService;
  abstract channels: AbstractChannelService;
  abstract members: AbstractMemberService;
  abstract users: AbstractUserService;
  abstract messages: AbstractMessageService;
  abstract roles: AbstractRoleService;
  abstract voice: AbstractVoiceService;
}

export class SpaceServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
  onCreate(space: Space) {
    this.sender.emit(this.room, "spaces/onCreate", space);
  }
  onUpdate(space: Space) {
    this.sender.emit(this.room, "spaces/onUpdate", space);
  }
  onDelete(space: Space) {
    this.sender.emit(this.room, "spaces/onDelete", space);
  }
}

export abstract class AbstractSpaceService {
  $: (room: string) => SpaceServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new SpaceServiceSender(sophonCore.senderCore, room);
  }

  abstract get(ctx: SophonInstance<SophonContext>, id: string): Promise<Space>;
  abstract list(ctx: SophonInstance<SophonContext>): Promise<Space[]>;
  abstract create(
    ctx: SophonInstance<SophonContext>,
    name: string
  ): Promise<Space>;
  abstract update(
    ctx: SophonInstance<SophonContext>,
    id: string,
    options: SpaceUpdateOptions
  ): Promise<Space>;
  abstract delete(
    ctx: SophonInstance<SophonContext>,
    id: string
  ): Promise<void>;
  abstract join(ctx: SophonInstance<SophonContext>, id: string): Promise<void>;
  abstract leave(ctx: SophonInstance<SophonContext>, id: string): Promise<void>;
  abstract createInvite(
    ctx: SophonInstance<SophonContext>,
    id: string
  ): Promise<Invite>;
  abstract deleteInvite(
    ctx: SophonInstance<SophonContext>,
    code: string
  ): Promise<void>;
  abstract listInvites(
    ctx: SophonInstance<SophonContext>,
    id: string
  ): Promise<Invite[]>;
  abstract addBot(
    ctx: SophonInstance<SophonContext>,
    spaceId: string,
    userId: string
  ): Promise<void>;
}

export class MemberServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
}

export abstract class AbstractMemberService {
  $: (room: string) => MemberServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new MemberServiceSender(sophonCore.senderCore, room);
  }

  abstract get(
    ctx: SophonInstance<SophonContext>,
    spaceId: string,
    userId: string
  ): Promise<Member>;
  abstract list(
    ctx: SophonInstance<SophonContext>,
    spaceId: string
  ): Promise<Member[]>;
  abstract update(
    ctx: SophonInstance<SophonContext>,
    spaceId: string,
    userId: string,
    roleIds: MemberUpdateOptions
  ): Promise<Member>;
}

export class UserServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
}

export abstract class AbstractUserService {
  $: (room: string) => UserServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new UserServiceSender(sophonCore.senderCore, room);
  }

  abstract me(ctx: SophonInstance<SophonContext>): Promise<User>;
  abstract update(
    ctx: SophonInstance<SophonContext>,
    options: UserUpdateOptions
  ): Promise<User>;
}

export class ChannelServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
  onCreate(channel: Channel) {
    this.sender.emit(this.room, "channels/onCreate", channel);
  }
  onUpdate(channel: Channel) {
    this.sender.emit(this.room, "channels/onUpdate", channel);
  }
  onDelete(channel: Channel) {
    this.sender.emit(this.room, "channels/onDelete", channel);
  }
  onTypingStart(event: TypingEvent) {
    this.sender.emit(this.room, "channels/onTypingStart", event);
  }
  onTypingStop(event: TypingEvent) {
    this.sender.emit(this.room, "channels/onTypingStop", event);
  }
}

export abstract class AbstractChannelService {
  $: (room: string) => ChannelServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new ChannelServiceSender(sophonCore.senderCore, room);
  }

  abstract get(
    ctx: SophonInstance<SophonContext>,
    id: string
  ): Promise<Channel>;
  abstract list(
    ctx: SophonInstance<SophonContext>,
    spaceId: string
  ): Promise<Channel[]>;
  abstract create(
    ctx: SophonInstance<SophonContext>,
    spaceId: string,
    options: ChannelCreateOptions
  ): Promise<Channel>;
  abstract delete(
    ctx: SophonInstance<SophonContext>,
    id: string
  ): Promise<void>;
  abstract move(
    ctx: SophonInstance<SophonContext>,
    id: string,
    order: number
  ): Promise<void>;
  abstract startTyping(
    ctx: SophonInstance<SophonContext>,
    channelId: string,
    duration: number
  ): Promise<void>;
  abstract stopTyping(
    ctx: SophonInstance<SophonContext>,
    channelId: string
  ): Promise<void>;
}

export class MessageServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
  onCreate(message: Message) {
    this.sender.emit(this.room, "messages/onCreate", message);
  }
  onUpdate(message: Message) {
    this.sender.emit(this.room, "messages/onUpdate", message);
  }
  onDelete(event: MessageDeleteEvent) {
    this.sender.emit(this.room, "messages/onDelete", event);
  }
}

export abstract class AbstractMessageService {
  $: (room: string) => MessageServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new MessageServiceSender(sophonCore.senderCore, room);
  }

  abstract list(
    ctx: SophonInstance<SophonContext>,
    channelId: string,
    options: ListMessageOptions
  ): Promise<Message[]>;
  abstract send(
    ctx: SophonInstance<SophonContext>,
    channelId: string,
    content: string
  ): Promise<Message>;
  abstract delete(
    ctx: SophonInstance<SophonContext>,
    channelId: string,
    messageId: string
  ): Promise<void>;
  abstract ack(
    ctx: SophonInstance<SophonContext>,
    channelId: string,
    timestamp: string
  ): Promise<void>;
}

export class RoleServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
}

export abstract class AbstractRoleService {
  $: (room: string) => RoleServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new RoleServiceSender(sophonCore.senderCore, room);
  }
}

export class VoiceServiceSender {
  constructor(private sender: SenderCore, private room: string) {}
}

export abstract class AbstractVoiceService {
  $: (room: string) => VoiceServiceSender;
  public constructor(protected sophonCore: SophonCore<SophonContext>) {
    this.$ = (room) => new VoiceServiceSender(sophonCore.senderCore, room);
  }

  abstract join(
    ctx: SophonInstance<SophonContext>,
    channelId: string
  ): Promise<VoiceToken>;
}

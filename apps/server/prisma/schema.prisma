// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserCategory {
  BOT
  UNVERIFIED
}

model User {
  id          String        @id @default(uuid()) @db.Uuid
  name        String        @db.VarChar(64)
  avatar      String?       @db.VarChar(256)
  description String?       @db.VarChar(2048)
  category    UserCategory?

  status UserStatus?

  SpaceUser     SpaceUser[]
  Message       Message[]
  Space         Space[]
  ChannelUnread ChannelUnread[]
  Account       Account?
  Bot           Bot?
  Bots          Bot[]           @relation("Bots")

  RelationFrom Relationship[] @relation("RelationFrom")
  RelationTo   Relationship[] @relation("RelationTo")
  Ban          Ban[]
  Invite       Invite[]
  Settings     Settings?
}

model UserStatus {
  id        String   @id @default(uuid()) @db.Uuid
  user      User     @relation(fields: [id], references: [id], onDelete: Cascade)
  presence  String?
  content   String?
  timestamp DateTime @default(now())
}

model Settings {
  id     String @id @default(uuid()) @db.Uuid
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // setting data, formatted as JSON
  data String @db.VarChar(262144) // 256 KiB
}

// factor out email and password
model Account {
  id           String                @id @default(uuid()) @db.Uuid
  email        String                @unique
  passhash     String                @db.VarChar(256)
  user         User                  @relation(fields: [id], references: [id], onDelete: Cascade)
  RefreshToken RefreshToken[]
  Verification AccountVerification[]
}

model AccountVerification {
  id        String   @id @default(uuid()) @db.Uuid
  category  String
  token     String   @unique
  accountId String?  @db.Uuid
  expiresAt DateTime
  account   Account? @relation(fields: [accountId], references: [id])
}

model Bot {
  id   String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(64)
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)

  ownerId String @db.Uuid
  owner   User   @relation("Bots", fields: [ownerId], references: [id], onDelete: Cascade)

  secret String
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  expiresAt DateTime
  accountId String   @db.Uuid
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
}

model SpaceUser {
  id      String  @id @default(uuid()) @db.Uuid
  name    String? @db.VarChar(64)
  spaceId String  @db.Uuid
  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles  Role[]

  @@unique([userId, spaceId])
  @@index([spaceId])
}

model Role {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @db.VarChar(64)
  color       String? // hex color
  permissions String      @db.VarChar(128)
  position    Int
  users       SpaceUser[]

  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId])
}

enum SpaceType {
  NONE // regular
  DM
  GROUP
}

model Space {
  id      String    @id @default(uuid()) @db.Uuid
  name    String    @db.VarChar(64)
  icon    String?   @db.VarChar(256)
  ownerId String?   @db.Uuid
  owner   User?     @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  type    SpaceType @default(NONE)

  users        SpaceUser[]
  channels     Channel[]
  roles        Role[]
  Invite       Invite[]
  Relationship Relationship[]
  Ban          Ban[]
}

model Channel {
  id   String      @id @default(uuid()) @db.Uuid
  type ChannelType @default(TEXT)

  parentId String?   @db.Uuid
  parent   Channel?  @relation("NestedChannel", fields: [parentId], references: [id], onDelete: Cascade)
  children Channel[] @relation("NestedChannel")
  order    Int       @default(0)

  name        String    @db.VarChar(64)
  spaceId     String    @db.Uuid
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  Message     Message[]
  lastUpdated DateTime?

  channelUnread ChannelUnread[]
  Document      Document?

  @@index([spaceId])
}

model ChannelUnread {
  channelId String   @db.Uuid
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime

  @@id([channelId, userId])
}

enum ChannelType {
  TEXT
  VOICE
  DOCUMENT
  APPLICATION
  THREAD
  CATEGORY
}

model Message {
  id              String    @id @default(uuid()) @db.Uuid
  content         String    @db.VarChar(4096)
  timestamp       DateTime
  editedTimestamp DateTime?

  authorId  String? @db.Uuid
  author    User?   @relation(fields: [authorId], references: [id])
  channelId String  @db.Uuid
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId, timestamp])
}

model Invite {
  id        String   @id // use NanoID instead
  spaceId   String   @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  creatorId String?  @db.Uuid
  creator   User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
}

model Relationship {
  id         String @id @default(uuid()) @db.Uuid
  userId     String @db.Uuid
  user       User?  @relation("RelationFrom", fields: [userId], references: [id], onDelete: Cascade)
  relationId String @db.Uuid
  relation   User?  @relation("RelationTo", fields: [relationId], references: [id], onDelete: Cascade)

  // yes, every DM gets their own space
  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  state RelationState

  @@unique([userId, relationId])
  @@index([relationId])
}

enum RelationState {
  NONE
  FRIEND
  BLOCKED
  INCOMING_REQUEST
  OUTGOING_REQUEST
}

model Ban {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  reason String?

  @@unique([spaceId, userId])
}

model Document {
  id        String  @id @default(uuid()) @db.Uuid
  channelId String  @unique @db.Uuid
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  content   String  @db.VarChar(262144) // 256 KiB
}

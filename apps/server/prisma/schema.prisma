// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  name         String
  avatar       String?
  passhash     String
  SpaceUser    SpaceUser[]
  RefreshToken RefreshToken[]
  Message      Message[]
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  expiresAt DateTime
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SpaceUser {
  id      String  @id @default(uuid()) @db.Uuid
  name    String?
  spaceId String  @db.Uuid
  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles  Role[]

  @@unique([userId, spaceId])
  @@index([spaceId])
}

model Role {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  color       String
  permissions String
  users       SpaceUser[]

  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  @@index([spaceId])
}

model Space {
  id      String      @id @default(uuid()) @db.Uuid
  name    String
  User    SpaceUser[]
  Channel Channel[]
  Role    Role[]
}

model Channel {
  id   String      @id @default(uuid()) @db.Uuid
  type ChannelType @default(TEXT)

  parentId String?   @db.Uuid
  parent   Channel?  @relation("NestedChannel", fields: [parentId], references: [id], onDelete: Cascade)
  children Channel[] @relation("NestedChannel")

  name    String
  spaceId String    @db.Uuid
  space   Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  Message Message[]

  @@index([spaceId])
}

enum ChannelType {
  TEXT
  VOICE
  THREAD
  CATEGORY
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  timestamp DateTime

  authorId  String? @db.Uuid
  author    User?   @relation(fields: [authorId], references: [id])
  channelId String  @db.Uuid
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([timestamp])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output = "../../../node_modules/@generated/type-graphql"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  passhash     String
  User         User[]
  RefreshToken RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  expiresAt DateTime
  accountId String   @db.Uuid
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
}

model User {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  accountId String    @db.Uuid
  account   Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  roles     Role[]
  Message   Message[]

  @@unique([accountId, spaceId])
  @@index([spaceId])
}

model Role {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  color       String
  permissions String
  users       User[]

  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  @@index([spaceId])
}

model Space {
  id      String    @id @default(uuid()) @db.Uuid
  name    String
  User    User[]
  Channel Channel[]
  Role    Role[]
}

model Channel {
  id      String    @id @default(uuid()) @db.Uuid
  name    String
  spaceId String    @db.Uuid
  space   Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  Message Message[]

  @@index([spaceId])
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  timestamp DateTime

  authorId  String? @db.Uuid
  author    User?   @relation(fields: [authorId], references: [id])
  channelId String  @db.Uuid
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([timestamp])
}

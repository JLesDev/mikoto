// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum UserCategory {
  BOT
  UNVERIFIED
}

model User {
  id       String        @id @default(uuid()) @db.Uuid
  name     String
  avatar   String?
  category UserCategory?

  SpaceUser     SpaceUser[]
  RefreshToken  RefreshToken[]
  Message       Message[]
  Space         Space[]
  ChannelUnread ChannelUnread[]
  Verification  Verification[]
  Account       Account?
  Bot           Bot?
  Bots          Bot[]           @relation("Bots")

  alphaRelation Relationship[] @relation("AlphaRelation")
  betaRelation  Relationship[] @relation("BetaRelation")
  Ban           Ban[]
  Invite        Invite[]
}

// factor out email and password
model Account {
  id           String         @id @default(uuid()) @db.Uuid
  email        String         @unique
  passhash     String
  user         User           @relation(fields: [id], references: [id], onDelete: Cascade)
  RefreshToken RefreshToken[]
}

model Bot {
  id   String @id @default(uuid()) @db.Uuid
  name String
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)

  ownerId String @db.Uuid
  owner   User   @relation("Bots", fields: [ownerId], references: [id], onDelete: Cascade)

  secret String
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String   @unique
  expiresAt DateTime
  accountId String   @db.Uuid
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.Uuid

  @@index([accountId])
}

model SpaceUser {
  id      String  @id @default(uuid()) @db.Uuid
  name    String?
  spaceId String  @db.Uuid
  space   Space   @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles  Role[]

  @@unique([userId, spaceId])
  @@index([spaceId])
}

model Role {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  color       String? // hex color
  permissions String
  position    Int
  users       SpaceUser[]

  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId])
}

enum SpaceType {
  NONE // regular
  DM
  GROUP
}

model Space {
  id      String    @id @default(uuid()) @db.Uuid
  name    String
  icon    String?
  ownerId String?   @db.Uuid
  owner   User?     @relation(fields: [ownerId], references: [id], onDelete: SetNull)
  type    SpaceType @default(NONE)

  users        SpaceUser[]
  channels     Channel[]
  roles        Role[]
  Invite       Invite[]
  Relationship Relationship?
  Ban          Ban[]
}

model Channel {
  id   String      @id @default(uuid()) @db.Uuid
  type ChannelType @default(TEXT)

  parentId String?   @db.Uuid
  parent   Channel?  @relation("NestedChannel", fields: [parentId], references: [id], onDelete: Cascade)
  children Channel[] @relation("NestedChannel")
  order    Int       @default(0)

  name        String
  spaceId     String    @db.Uuid
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  Message     Message[]
  lastUpdated DateTime?

  channelUnread ChannelUnread[]

  @@index([spaceId])
}

model ChannelUnread {
  channelId String   @db.Uuid
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  timestamp DateTime

  @@id([channelId, userId])
}

enum ChannelType {
  TEXT
  VOICE
  THREAD
  CATEGORY
}

model Message {
  id              String    @id @default(uuid()) @db.Uuid
  content         String
  timestamp       DateTime
  editedTimestamp DateTime?

  authorId  String? @db.Uuid
  author    User?   @relation(fields: [authorId], references: [id])
  channelId String  @db.Uuid
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId, timestamp])
}

model Verification {
  id        String   @id @default(uuid()) @db.Uuid
  category  String
  token     String   @unique
  userId    String?  @db.Uuid
  expiresAt DateTime
  user      User?    @relation(fields: [userId], references: [id])
}

model Invite {
  id        String   @id // use NanoID instead
  spaceId   String   @db.Uuid
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  creatorId String?  @db.Uuid
  creator   User?    @relation(fields: [creatorId], references: [id], onDelete: SetNull)
}

model Relationship {
  id        String @id @default(uuid()) @db.Uuid
  alphaId   String @db.Uuid
  alphaUser User?  @relation("AlphaRelation", fields: [alphaId], references: [id], onDelete: NoAction)
  betaId    String @db.Uuid
  betaUser  User?  @relation("BetaRelation", fields: [betaId], references: [id], onDelete: NoAction)

  // yes, every DM gets their own space
  spaceId String @unique @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  aToB RelationState
  bToA RelationState

  @@unique([alphaId, betaId])
  @@index([betaId])
}

enum RelationState {
  NONE
  FRIEND
  BLOCKED
}

model Ban {
  id      String @id @default(uuid()) @db.Uuid
  userId  String @db.Uuid
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  spaceId String @db.Uuid
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  reason String?

  @@unique([spaceId, userId])
}
